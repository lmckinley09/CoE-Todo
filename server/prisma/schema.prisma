generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_type {
  id                Int                 @id @default(autoincrement())
  description       String              @db.VarChar
  user_board_access user_board_access[]
}

model app_user {
  id                Int                 @id @default(autoincrement())
  email             String              @db.VarChar
  first_name        String              @db.VarChar
  last_name         String              @db.VarChar
  password          String              @db.VarChar
  profile_picture   String              @db.VarChar
  created           DateTime?           @default(now()) @db.Timestamp(6)
  last_modified     DateTime?           @default(now()) @db.Timestamp(6)
  user_board_access user_board_access[]
}

model board {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar
  created           DateTime?           @default(now()) @db.Timestamp(6)
  last_modified     DateTime?           @default(now()) @db.Timestamp(6)
  job               job[]
  user_board_access user_board_access[]
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model job {
  id                                      Int           @id @default(autoincrement())
  board_id                                Int
  type_id                                 Int
  title                                   String        @db.VarChar
  description                             String?       @db.VarChar
  status                                  String?       @db.VarChar
  completion_date                         DateTime?     @db.Date
  created                                 DateTime?     @default(now()) @db.Timestamp(6)
  last_modified                           DateTime?     @default(now()) @db.Timestamp(6)
  board                                   board         @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_board")
  job_type                                job_type      @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_type")
  project_job_project_job_job_idTojob     project_job[] @relation("project_job_job_idTojob")
  project_job_project_job_project_idTojob project_job[] @relation("project_job_project_idTojob")
}

model job_type {
  id               Int    @id @default(autoincrement())
  type_description String @db.VarChar
  job              job[]
}

model project_job {
  id                              Int @id @default(autoincrement())
  project_id                      Int
  job_id                          Int
  job_project_job_job_idTojob     job @relation("project_job_job_idTojob", fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_job")
  job_project_job_project_idTojob job @relation("project_job_project_idTojob", fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_project")

  @@unique([project_id, job_id])
}

model user_board_access {
  id          Int         @id @default(autoincrement())
  user_id     Int
  board_id    Int
  type_id     Int
  board       board       @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_board")
  access_type access_type @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_type")
  app_user    app_user    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}
